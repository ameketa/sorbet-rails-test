# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `arbre` gem.
# Please instead update this file by running `bin/tapioca gem arbre`.

module Arbre; end

class Arbre::Component < ::Arbre::HTML::Div
  # @return [Component] a new instance of Component
  def initialize(*_arg0); end

  # By default components render a div
  def tag_name; end

  protected

  # By default, add a css class named after the ruby class
  def default_class_name; end
end

# The Arbre::Context class is the frontend for using Arbre.
#
# The simplest example possible:
#
#     html = Arbre::Context.new do
#       h1 "Hello World"
#     end
#
#     html.to_s #=> "<h1>Hello World</h1>"
#
# The contents of the block are instance eval'd within the Context
# object. This means that you lose context to the outside world from
# within the block. To pass local variables into the Context, use the
# assigns param.
#
#     html = Arbre::Context.new({one: 1}) do
#       h1 "Your number #{one}"
#     end
#
#     html.to_s #=> "Your number 1"
class Arbre::Context < ::Arbre::Element
  # Initialize a new Arbre::Context
  #
  # @param assigns [Hash] A hash of objecs that you would like to be
  #   availble as local variables within the Context
  # @param helpers [Object] An object that has methods on it which will become
  #   instance methods within the context.
  # @return [Context] a new instance of Context
  # @yield [] The block that will get instance eval'd in the context
  def initialize(assigns = T.unsafe(nil), helpers = T.unsafe(nil), &block); end

  def arbre_context; end
  def assigns; end
  def bytesize; end
  def current_arbre_element; end
  def helpers; end
  def indent_level; end
  def length; end
  def method_missing(method, *args, **_arg2, &block); end

  # @raise [ArgumentError]
  def with_current_arbre_element(tag); end

  # @raise [ArgumentError]
  def within(tag); end

  private

  # Caches the rendered HTML so that we don't re-render just to
  # get the content lenght or to delegate a method to the HTML
  def cached_html; end

  # @return [Boolean]
  def respond_to_missing?(method, include_all); end
end

class Arbre::Element
  include ::Arbre::Element::BuilderMethods
  include ::Arbre::Rails::Rendering
  extend ::Arbre::Element::BuilderMethods::ClassMethods

  # @return [Element] a new instance of Element
  def initialize(arbre_context = T.unsafe(nil)); end

  def +(element); end
  def <<(child); end
  def add_child(child); end
  def ancestors; end

  # Returns the value of attribute arbre_context.
  def arbre_context; end

  def assigns; end
  def build(*args, &block); end

  # Returns the value of attribute children.
  def children; end

  # @return [Boolean]
  def children?; end

  def content; end
  def content=(contents); end
  def each(&block); end
  def find_by_class(class_name); end
  def find_by_tag(tag_name); end

  # TODO: Shouldn't grab whole tree
  def find_first_ancestor(type); end

  def get_elements_by_class_name(class_name); end
  def get_elements_by_tag_name(tag_name); end
  def helpers; end
  def html_safe; end
  def indent_level; end
  def inspect; end

  # Returns the value of attribute parent.
  def parent; end

  def parent=(parent); end

  # @return [Boolean]
  def parent?; end

  def remove_child(child); end
  def tag_name; end
  def to_a; end
  def to_ary; end
  def to_s; end
  def to_str; end

  private

  # Resets the Elements children
  def clear_children!; end

  def method_missing(name, *args, **_arg2, &block); end
end

module Arbre::Element::BuilderMethods
  mixes_in_class_methods ::Arbre::Element::BuilderMethods::ClassMethods

  def a(*args, &block); end
  def abbr(*args, &block); end
  def action_items(*args, &block); end
  def active_admin_comments_for(*args, &block); end
  def active_admin_form_for(*args, &block); end
  def active_filters_sidebar_content(*args, &block); end
  def address(*args, &block); end
  def area(*args, &block); end
  def article(*args, &block); end
  def aside(*args, &block); end
  def attributes_table_for(*args, &block); end
  def audio(*args, &block); end
  def b(*args, &block); end
  def base(*args, &block); end
  def bdo(*args, &block); end
  def blank_slate(*args, &block); end
  def blockquote(*args, &block); end
  def body(*args, &block); end
  def br(*args, &block); end
  def build_tag(klass, *args, &block); end
  def button(*args, &block); end
  def canvas(*args, &block); end
  def caption(*args, &block); end
  def cite(*args, &block); end
  def code(*args, &block); end
  def col(*args, &block); end
  def colgroup(*args, &block); end
  def columns(*args, &block); end
  def command(*args, &block); end
  def current_arbre_element; end
  def datalist(*args, &block); end
  def dd(*args, &block); end
  def del(*args, &block); end
  def details(*args, &block); end
  def dfn(*args, &block); end
  def div(*args, &block); end
  def dl(*args, &block); end
  def dropdown_menu(*args, &block); end
  def dt(*args, &block); end
  def edit_page(*args, &block); end
  def em(*args, &block); end
  def embed(*args, &block); end
  def fieldset(*args, &block); end
  def figcaption(*args, &block); end
  def figure(*args, &block); end
  def footer(*args, &block); end
  def form(*args, &block); end
  def form_for(*args, &block); end
  def global_navigation(*args, &block); end
  def h1(*args, &block); end
  def h2(*args, &block); end
  def h3(*args, &block); end
  def h4(*args, &block); end
  def h5(*args, &block); end
  def h6(*args, &block); end
  def head(*args, &block); end
  def header(*args, &block); end
  def hgroup(*args, &block); end
  def hr(*args, &block); end
  def html(*args, &block); end
  def i(*args, &block); end
  def iframe(*args, &block); end
  def img(*args, &block); end
  def index_list_renderer(*args, &block); end
  def index_page(*args, &block); end
  def index_scopes(*args, &block); end
  def input(*args, &block); end
  def ins(*args, &block); end
  def insert_tag(klass, *args, &block); end
  def kbd(*args, &block); end
  def keygen(*args, &block); end
  def label(*args, &block); end
  def layout(*args, &block); end
  def legend(*args, &block); end
  def li(*args, &block); end
  def link(*args, &block); end
  def map(*args, &block); end
  def mark(*args, &block); end
  def menu(*args, &block); end
  def menu_item(*args, &block); end
  def menuitem(*args, &block); end
  def meta(*args, &block); end
  def meter(*args, &block); end
  def nav(*args, &block); end
  def new_page(*args, &block); end
  def noscript(*args, &block); end
  def object(*args, &block); end
  def ol(*args, &block); end
  def optgroup(*args, &block); end
  def option(*args, &block); end
  def output(*args, &block); end
  def page(*args, &block); end
  def paginated_collection(*args, &block); end
  def panel(*args, &block); end
  def para(*args, &block); end
  def param(*args, &block); end
  def pre(*args, &block); end
  def progress(*args, &block); end
  def q(*args, &block); end
  def s(*args, &block); end
  def samp(*args, &block); end
  def scopes_renderer(*args, &block); end
  def script(*args, &block); end
  def section(*args, &block); end
  def select(*args, &block); end
  def show_page(*args, &block); end
  def sidebar(*args, &block); end
  def sidebar_section(*args, &block); end
  def site_title(*args, &block); end
  def small(*args, &block); end
  def source(*args, &block); end
  def span(*args, &block); end
  def status_tag(*args, &block); end
  def strong(*args, &block); end
  def style(*args, &block); end
  def sub(*args, &block); end
  def summary(*args, &block); end
  def sup(*args, &block); end
  def svg(*args, &block); end
  def table(*args, &block); end
  def table_actions(*args, &block); end
  def table_for(*args, &block); end
  def tabs(*args, &block); end
  def tbody(*args, &block); end
  def td(*args, &block); end
  def text_node(*args, &block); end
  def textarea(*args, &block); end
  def tfoot(*args, &block); end
  def th(*args, &block); end
  def thead(*args, &block); end
  def time(*args, &block); end
  def title(*args, &block); end
  def title_bar(*args, &block); end
  def tr(*args, &block); end
  def track(*args, &block); end
  def ul(*args, &block); end
  def unsupported_browser(*args, &block); end
  def utility_navigation(*args, &block); end
  def var(*args, &block); end
  def video(*args, &block); end
  def wbr(*args, &block); end
  def with_current_arbre_element(tag, &block); end
  def within(tag, &block); end

  private

  # Appends the value to the current DOM element if there are no
  # existing DOM Children and it responds to #to_s
  def append_return_block(tag); end

  # Returns true if the object should be converted into a text node
  # and appended into the DOM.
  #
  # @return [Boolean]
  def appendable_tag?(tag); end

  class << self
    # @private
    def included(klass); end
  end
end

module Arbre::Element::BuilderMethods::ClassMethods
  def builder_method(method_name); end
end

class Arbre::Element::Proxy < ::BasicObject
  # @return [Proxy] a new instance of Proxy
  def initialize(element); end

  def method_missing(method, *args, &block); end

  # @return [Boolean]
  def respond_to?(method, include_all = T.unsafe(nil)); end
end

# Stores a collection of Element objects
class Arbre::ElementCollection < ::Array
  def &(other); end
  def +(other); end
  def -(other); end
  def to_s; end
end

module Arbre::HTML; end
class Arbre::HTML::A < ::Arbre::HTML::Tag; end
Arbre::HTML::AUTO_BUILD_ELEMENTS = T.let(T.unsafe(nil), Array)
class Arbre::HTML::Abbr < ::Arbre::HTML::Tag; end
class Arbre::HTML::Address < ::Arbre::HTML::Tag; end
class Arbre::HTML::Area < ::Arbre::HTML::Tag; end
class Arbre::HTML::Article < ::Arbre::HTML::Tag; end
class Arbre::HTML::Aside < ::Arbre::HTML::Tag; end

class Arbre::HTML::Attributes < ::Hash
  # @return [Boolean]
  def any?; end

  def to_s; end

  protected

  def html_escape(s); end

  # @return [Boolean]
  def value_empty?(value); end
end

class Arbre::HTML::Audio < ::Arbre::HTML::Tag; end
class Arbre::HTML::B < ::Arbre::HTML::Tag; end
class Arbre::HTML::Base < ::Arbre::HTML::Tag; end
class Arbre::HTML::Bdo < ::Arbre::HTML::Tag; end
class Arbre::HTML::Blockquote < ::Arbre::HTML::Tag; end
class Arbre::HTML::Body < ::Arbre::HTML::Tag; end
class Arbre::HTML::Br < ::Arbre::HTML::Tag; end
class Arbre::HTML::Button < ::Arbre::HTML::Tag; end
class Arbre::HTML::Canvas < ::Arbre::HTML::Tag; end
class Arbre::HTML::Caption < ::Arbre::HTML::Tag; end
class Arbre::HTML::Cite < ::Arbre::HTML::Tag; end

# Holds a set of classes
class Arbre::HTML::ClassList < ::Set
  def <<(class_names); end
  def add(class_names); end
  def to_s; end

  class << self
    def build_from_string(class_names); end
  end
end

class Arbre::HTML::Code < ::Arbre::HTML::Tag; end
class Arbre::HTML::Col < ::Arbre::HTML::Tag; end
class Arbre::HTML::Colgroup < ::Arbre::HTML::Tag; end
class Arbre::HTML::Command < ::Arbre::HTML::Tag; end
class Arbre::HTML::Datalist < ::Arbre::HTML::Tag; end
class Arbre::HTML::Dd < ::Arbre::HTML::Tag; end
class Arbre::HTML::Del < ::Arbre::HTML::Tag; end
class Arbre::HTML::Details < ::Arbre::HTML::Tag; end
class Arbre::HTML::Dfn < ::Arbre::HTML::Tag; end
class Arbre::HTML::Div < ::Arbre::HTML::Tag; end
class Arbre::HTML::Dl < ::Arbre::HTML::Tag; end

class Arbre::HTML::Document < ::Arbre::HTML::Tag
  def build(*args); end
  def doctype; end
  def document; end
  def tag_name; end
  def to_s; end

  protected

  def build_body; end
  def build_head; end
end

class Arbre::HTML::Dt < ::Arbre::HTML::Tag; end
class Arbre::HTML::Em < ::Arbre::HTML::Tag; end
class Arbre::HTML::Embed < ::Arbre::HTML::Tag; end
class Arbre::HTML::Fieldset < ::Arbre::HTML::Tag; end
class Arbre::HTML::Figcaption < ::Arbre::HTML::Tag; end
class Arbre::HTML::Figure < ::Arbre::HTML::Tag; end
class Arbre::HTML::Footer < ::Arbre::HTML::Tag; end
class Arbre::HTML::Form < ::Arbre::HTML::Tag; end
class Arbre::HTML::H1 < ::Arbre::HTML::Tag; end
class Arbre::HTML::H2 < ::Arbre::HTML::Tag; end
class Arbre::HTML::H3 < ::Arbre::HTML::Tag; end
class Arbre::HTML::H4 < ::Arbre::HTML::Tag; end
class Arbre::HTML::H5 < ::Arbre::HTML::Tag; end
class Arbre::HTML::H6 < ::Arbre::HTML::Tag; end
Arbre::HTML::HTML5_ELEMENTS = T.let(T.unsafe(nil), Array)
class Arbre::HTML::Head < ::Arbre::HTML::Tag; end
class Arbre::HTML::Header < ::Arbre::HTML::Tag; end
class Arbre::HTML::Hgroup < ::Arbre::HTML::Tag; end
class Arbre::HTML::Hr < ::Arbre::HTML::Tag; end
class Arbre::HTML::Html < ::Arbre::HTML::Tag; end
class Arbre::HTML::I < ::Arbre::HTML::Tag; end
class Arbre::HTML::Iframe < ::Arbre::HTML::Tag; end
class Arbre::HTML::Img < ::Arbre::HTML::Tag; end
class Arbre::HTML::Input < ::Arbre::HTML::Tag; end
class Arbre::HTML::Ins < ::Arbre::HTML::Tag; end
class Arbre::HTML::Kbd < ::Arbre::HTML::Tag; end
class Arbre::HTML::Keygen < ::Arbre::HTML::Tag; end
class Arbre::HTML::Label < ::Arbre::HTML::Tag; end
class Arbre::HTML::Legend < ::Arbre::HTML::Tag; end
class Arbre::HTML::Li < ::Arbre::HTML::Tag; end
class Arbre::HTML::Link < ::Arbre::HTML::Tag; end
class Arbre::HTML::Map < ::Arbre::HTML::Tag; end
class Arbre::HTML::Mark < ::Arbre::HTML::Tag; end
class Arbre::HTML::Menu < ::Arbre::HTML::Tag; end
class Arbre::HTML::Menuitem < ::Arbre::HTML::Tag; end
class Arbre::HTML::Meta < ::Arbre::HTML::Tag; end
class Arbre::HTML::Meter < ::Arbre::HTML::Tag; end
class Arbre::HTML::Nav < ::Arbre::HTML::Tag; end
class Arbre::HTML::Noscript < ::Arbre::HTML::Tag; end
class Arbre::HTML::Object < ::Arbre::HTML::Tag; end
class Arbre::HTML::Ol < ::Arbre::HTML::Tag; end
class Arbre::HTML::Optgroup < ::Arbre::HTML::Tag; end
class Arbre::HTML::Option < ::Arbre::HTML::Tag; end
class Arbre::HTML::Output < ::Arbre::HTML::Tag; end
class Arbre::HTML::P < ::Arbre::HTML::Tag; end
class Arbre::HTML::Param < ::Arbre::HTML::Tag; end
class Arbre::HTML::Pre < ::Arbre::HTML::Tag; end
class Arbre::HTML::Progress < ::Arbre::HTML::Tag; end
class Arbre::HTML::Q < ::Arbre::HTML::Tag; end
class Arbre::HTML::S < ::Arbre::HTML::Tag; end
class Arbre::HTML::Samp < ::Arbre::HTML::Tag; end
class Arbre::HTML::Script < ::Arbre::HTML::Tag; end
class Arbre::HTML::Section < ::Arbre::HTML::Tag; end
class Arbre::HTML::Select < ::Arbre::HTML::Tag; end
class Arbre::HTML::Small < ::Arbre::HTML::Tag; end
class Arbre::HTML::Source < ::Arbre::HTML::Tag; end
class Arbre::HTML::Span < ::Arbre::HTML::Tag; end
class Arbre::HTML::Strong < ::Arbre::HTML::Tag; end
class Arbre::HTML::Style < ::Arbre::HTML::Tag; end
class Arbre::HTML::Sub < ::Arbre::HTML::Tag; end
class Arbre::HTML::Summary < ::Arbre::HTML::Tag; end
class Arbre::HTML::Sup < ::Arbre::HTML::Tag; end
class Arbre::HTML::Svg < ::Arbre::HTML::Tag; end

class Arbre::HTML::Table < ::Arbre::HTML::Tag
  # @return [Table] a new instance of Table
  def initialize(*_arg0); end

  protected

  # Set some good defaults for tables
  def set_table_tag_defaults; end
end

class Arbre::HTML::Tag < ::Arbre::Element
  # @return [Tag] a new instance of Tag
  def initialize(*_arg0); end

  def add_class(class_names); end
  def attr(name); end

  # Returns the value of attribute attributes.
  def attributes; end

  def build(*args); end
  def class_list; end

  # Returns a string of classes
  def class_names; end

  def extract_arguments(args); end
  def get_attribute(name); end

  # @return [Boolean]
  def has_attribute?(name); end

  def id; end

  # Generates and id for the object if it doesn't exist already
  def id!; end

  def id=(id); end
  def remove_attribute(name); end
  def remove_class(class_names); end
  def set_attribute(name, value); end
  def to_s; end

  private

  def attributes_html; end

  # @return [Boolean]
  def child_is_text?; end

  def closing_tag; end
  def default_id_for_prefix; end
  def dom_class_name_for(record); end
  def dom_id_for(record); end
  def indent(open_tag, child_content, close_tag); end

  # @return [Boolean]
  def no_child?; end

  def opening_tag; end

  # @return [Boolean]
  def self_closing_tag?; end

  def set_for_attribute(record); end
end

Arbre::HTML::Tag::INDENT_SIZE = T.let(T.unsafe(nil), Integer)

# See: http://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements
Arbre::HTML::Tag::SELF_CLOSING_ELEMENTS = T.let(T.unsafe(nil), Array)

class Arbre::HTML::Tbody < ::Arbre::HTML::Tag; end
class Arbre::HTML::Td < ::Arbre::HTML::Tag; end

class Arbre::HTML::TextNode < ::Arbre::Element
  def add_child(*args); end
  def build(string); end
  def class_list; end
  def tag_name; end
  def to_s; end

  class << self
    # Builds a text node from a string
    def from_string(string); end
  end
end

class Arbre::HTML::Textarea < ::Arbre::HTML::Tag; end
class Arbre::HTML::Tfoot < ::Arbre::HTML::Tag; end
class Arbre::HTML::Th < ::Arbre::HTML::Tag; end
class Arbre::HTML::Thead < ::Arbre::HTML::Tag; end
class Arbre::HTML::Time < ::Arbre::HTML::Tag; end
class Arbre::HTML::Title < ::Arbre::HTML::Tag; end
class Arbre::HTML::Tr < ::Arbre::HTML::Tag; end
class Arbre::HTML::Track < ::Arbre::HTML::Tag; end
class Arbre::HTML::Ul < ::Arbre::HTML::Tag; end
class Arbre::HTML::Var < ::Arbre::HTML::Tag; end
class Arbre::HTML::Video < ::Arbre::HTML::Tag; end
class Arbre::HTML::Wbr < ::Arbre::HTML::Tag; end
module Arbre::Rails; end
module Arbre::Rails::Forms; end

class Arbre::Rails::Forms::FieldsForProxy < ::Arbre::Rails::Forms::FormBuilderProxy
  def build(form_builder, *args, &block); end
  def to_s; end
end

class Arbre::Rails::Forms::FormBuilderProxy < ::Arbre::Component
  # Returns the value of attribute form_builder.
  def form_builder; end

  # Since label and select are Arbre Elements already, we must
  # override it here instead of letting method_missing
  # deal with it
  def label(*args); end

  def select(*args); end

  private

  def method_missing(method, *args, **_arg2, &block); end
  def proxy_call_to_form(method, *args, &block); end

  # @return [Boolean]
  def respond_to_missing?(method, include_all); end
end

class Arbre::Rails::Forms::FormForProxy < ::Arbre::Rails::Forms::FormBuilderProxy
  def build(resource, form_options = T.unsafe(nil), &block); end
  def closing_tag; end
  def fields_for(*args, &block); end
  def opening_tag; end
  def split_string_on(string, match); end
end

module Arbre::Rails::Rendering
  def render(*args); end
end

class Arbre::Rails::TemplateHandler
  def call(template, source = T.unsafe(nil)); end
end
